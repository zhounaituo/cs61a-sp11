1. 编程语言的作用不仅在于指导计算机完成任务，更重要的是帮助我们组织思考。因此，我们要注重语言提供的能力——将简单的思想结合形成更加复杂思想的能力。
2. 语言的三个重要的机制：
	- 基础表达式(_primitive expressions_): 语言所涉及的最简单实体，包括 _基础数据_ 和 _基础过程_ 。
	- 结合的手段(_means of combination_): 可以将简单的元素结合成结合体
	- 抽象的手段(_means of abstraction_): 可以把结合体作为一个单元，对它命名和操作。
3. 在编程中，我们主要处理两个元素：过程(_procedures_)和数据(_data_)。
## 1.1.1. Expressions
![[expressions.png]]

1. 前缀表达式（_prefix notation_）：将操作符放置在最左边。
	1. 优点：1. 适应过程，可以给任意多个参数。2. 允许内嵌表达式。
2. Lisp 编译器的基础操作：_read-eval-print_
## 1.1.2. Naming and the Environment
1. 用 `define` 定义变量，它是 Lisp 中最简单的抽象。
2. 环境（_environment_ or _global environment_) ：由 Lisp 编译器在内存中维护。
	1. 作用：1. 跟踪定义的 name-object 对。
## 1.1.3 Evaluating Combinations
